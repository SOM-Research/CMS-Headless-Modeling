{
  "swagger": "2.0",
  "schemes": ["https"],
  "info": {
    "description": "This is a JSON API compliant implementation",
    "title": "Umami Food Magazine API - JSON API",
    "version": "Versioning not supported"
  },
  "host": "trobada.eu",
  "basePath": "/api",
  "securityDefinitions": {
    "csrf_token": {
      "type": "apiKey",
      "name": "X-CSRF-Token",
      "in": "header",
      "x-tokenUrl": "https://trobada.eu/user/token"
    }
  },
  "security": { "csrf_token": [] },
  "tags": [
    { "name": "Block", "description": "Configuration entity Block" },
    {
      "name": "Custom block - Banner block",
      "description": "Custom block type Banner block of type Custom block. A banner block contains a title, summary, link to content and a background image. The background image is scaled to fill the browser\u0027s width.",
      "x-entity-type": "block_content",
      "x-definition": { "$ref": "#/definitions/block_content--banner_block" }
    },
    {
      "name": "Custom block - Basic block",
      "description": "Custom block type Basic block of type Custom block. A basic block contains a title and a body.",
      "x-entity-type": "block_content",
      "x-definition": { "$ref": "#/definitions/block_content--basic" }
    },
    {
      "name": "Custom block - Disclaimer block",
      "description": "Custom block type Disclaimer block of type Custom block. A disclaimer block contains disclaimer and copyright text.",
      "x-entity-type": "block_content",
      "x-definition": {
        "$ref": "#/definitions/block_content--disclaimer_block"
      }
    },
    {
      "name": "Custom block - Footer promo block",
      "description": "Custom block type Footer promo block of type Custom block. A footer promo block contains a title, promo text, and a \u0022find out more\u0022 link.",
      "x-entity-type": "block_content",
      "x-definition": {
        "$ref": "#/definitions/block_content--footer_promo_block"
      }
    },
    {
      "name": "Custom block type",
      "description": "Configuration entity Custom block type"
    },
    {
      "name": "Contact form",
      "description": "Configuration entity Contact form"
    },
    {
      "name": "Contact message - Website feedback",
      "description": "Contact form Website feedback of type Contact message.",
      "x-entity-type": "contact_message",
      "x-definition": { "$ref": "#/definitions/contact_message--feedback" }
    },
    {
      "name": "Contact message - Personal contact form",
      "description": "Contact form Personal contact form of type Contact message.",
      "x-entity-type": "contact_message",
      "x-definition": { "$ref": "#/definitions/contact_message--personal" }
    },
    { "name": "Content moderation state" },
    {
      "name": "Text Editor",
      "description": "Configuration entity Text Editor"
    },
    { "name": "Field", "description": "Configuration entity Field" },
    {
      "name": "Field storage",
      "description": "Configuration entity Field storage"
    },
    { "name": "File" },
    {
      "name": "Text format",
      "description": "Configuration entity Text format"
    },
    {
      "name": "Image style",
      "description": "Configuration entity Image style"
    },
    {
      "name": "JSON:API Resource override",
      "description": "Configuration entity JSON:API Resource override"
    },
    {
      "name": "Content Language Settings",
      "description": "Configuration entity Content Language Settings"
    },
    { "name": "Language", "description": "Configuration entity Language" },
    {
      "name": "Media - Audio",
      "description": "Media type Audio of type Media. A locally hosted audio file.",
      "x-entity-type": "media",
      "x-definition": { "$ref": "#/definitions/media--audio" }
    },
    {
      "name": "Media - Document",
      "description": "Media type Document of type Media. An uploaded file or document, such as a PDF.",
      "x-entity-type": "media",
      "x-definition": { "$ref": "#/definitions/media--document" }
    },
    {
      "name": "Media - Image",
      "description": "Media type Image of type Media. Use local images for reusable media.",
      "x-entity-type": "media",
      "x-definition": { "$ref": "#/definitions/media--image" }
    },
    {
      "name": "Media - Remote video",
      "description": "Media type Remote video of type Media. A remotely hosted video from YouTube or Vimeo.",
      "x-entity-type": "media",
      "x-definition": { "$ref": "#/definitions/media--remote_video" }
    },
    {
      "name": "Media - Video",
      "description": "Media type Video of type Media. A locally hosted video file.",
      "x-entity-type": "media",
      "x-definition": { "$ref": "#/definitions/media--video" }
    },
    { "name": "Media type", "description": "Configuration entity Media type" },
    {
      "name": "Content type",
      "description": "Configuration entity Content type"
    },
    {
      "name": "Content - Article",
      "description": "Content type Article of type Content. Use \u003Cem\u003Earticles\u003C/em\u003E for time-sensitive content like news, press releases or blog posts.",
      "x-entity-type": "node",
      "x-definition": { "$ref": "#/definitions/node--article" }
    },
    {
      "name": "Content - Basic page",
      "description": "Content type Basic page of type Content. Use \u003Cem\u003Ebasic pages\u003C/em\u003E for your static content, such as an \u0027About us\u0027 page.",
      "x-entity-type": "node",
      "x-definition": { "$ref": "#/definitions/node--page" }
    },
    {
      "name": "Content - Recipe",
      "description": "Content type Recipe of type Content. Add a new recipe to the site.",
      "x-entity-type": "node",
      "x-definition": { "$ref": "#/definitions/node--recipe" }
    },
    {
      "name": "Content - Testclass",
      "description": "Content type Testclass of type Content. Test propouses",
      "x-entity-type": "node",
      "x-definition": { "$ref": "#/definitions/node--testclass" }
    },
    { "name": "URL alias" },
    {
      "name": "RDF mapping",
      "description": "Configuration entity RDF mapping"
    },
    {
      "name": "Responsive image style",
      "description": "Configuration entity Responsive image style"
    },
    {
      "name": "Search page",
      "description": "Configuration entity Search page"
    },
    {
      "name": "Shortcut link - Default",
      "description": "Shortcut set Default of type Shortcut link.",
      "x-entity-type": "shortcut",
      "x-definition": { "$ref": "#/definitions/shortcut--default" }
    },
    {
      "name": "Shortcut set",
      "description": "Configuration entity Shortcut set"
    },
    { "name": "Menu", "description": "Configuration entity Menu" },
    { "name": "Action", "description": "Configuration entity Action" },
    {
      "name": "Taxonomy term - Recipe category",
      "description": "Vocabulary Recipe category of type Taxonomy term. Use this taxonomy to group recipes of the same type together.",
      "x-entity-type": "taxonomy_term",
      "x-definition": { "$ref": "#/definitions/taxonomy_term--recipe_category" }
    },
    {
      "name": "Taxonomy term - Tags",
      "description": "Vocabulary Tags of type Taxonomy term. Use tags to group articles on similar topics into categories.",
      "x-entity-type": "taxonomy_term",
      "x-definition": { "$ref": "#/definitions/taxonomy_term--tags" }
    },
    {
      "name": "Taxonomy vocabulary",
      "description": "Configuration entity Taxonomy vocabulary"
    },
    { "name": "Tour", "description": "Configuration entity Tour" },
    { "name": "User" },
    { "name": "Role", "description": "Configuration entity Role" },
    { "name": "Workflow", "description": "Configuration entity Workflow" },
    { "name": "Custom menu link" },
    { "name": "View", "description": "Configuration entity View" },
    { "name": "View mode", "description": "Configuration entity View mode" },
    { "name": "Form mode", "description": "Configuration entity Form mode" },
    {
      "name": "Entity form display",
      "description": "Configuration entity Entity form display"
    },
    {
      "name": "Entity view display",
      "description": "Configuration entity Entity view display"
    },
    {
      "name": "Base field override",
      "description": "Configuration entity Base field override"
    },
    { "name": "Date format", "description": "Configuration entity Date format" }
  ],
  "definitions": {
    "block_content--banner_block": {
      "title": "block_content:banner_block Schema",
      "description": "Describes the payload for \u0027block_content\u0027 entities of the \u0027banner_block\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["block_content--banner_block"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__id": {
                  "type": "integer",
                  "title": "Custom block ID",
                  "description": "The custom block ID."
                },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID",
                  "description": "The revision ID."
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The custom block language code."
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "The log entry explaining the changes in this revision.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "info": {
                  "type": "string",
                  "title": "Block description",
                  "maxLength": 255,
                  "description": "A brief description of your block."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the custom block was last edited."
                },
                "reusable": {
                  "type": "boolean",
                  "title": "Reusable",
                  "description": "A boolean indicating whether this block is reusable.",
                  "default": true
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "content_translation_created": {
                  "type": "number",
                  "title": "Translation created time",
                  "format": "utc-millisec",
                  "description": "The Unix timestamp when the translation was created."
                },
                "field_content_link": {
                  "type": "object",
                  "properties": {
                    "uri": { "type": "uri", "title": "URI" },
                    "title": { "type": "string", "title": "Link text" }
                  },
                  "title": "Content Link"
                },
                "field_summary": { "type": "string", "title": "Summary" },
                "field_title": {
                  "type": "string",
                  "title": "Title",
                  "maxLength": 255
                }
              },
              "required": ["info", "revision_translation_affected"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "block_content_type": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["block_content_type--block_content_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Block type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "content_translation_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Translation author"
                },
                "field_media_image": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media--image"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media Image"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "block_content--basic": {
      "title": "block_content:basic Schema",
      "description": "Describes the payload for \u0027block_content\u0027 entities of the \u0027basic\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["block_content--basic"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__id": {
                  "type": "integer",
                  "title": "Custom block ID",
                  "description": "The custom block ID."
                },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID",
                  "description": "The revision ID."
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The custom block language code."
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "The log entry explaining the changes in this revision.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "info": {
                  "type": "string",
                  "title": "Block description",
                  "maxLength": 255,
                  "description": "A brief description of your block."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the custom block was last edited."
                },
                "reusable": {
                  "type": "boolean",
                  "title": "Reusable",
                  "description": "A boolean indicating whether this block is reusable.",
                  "default": true
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "content_translation_created": {
                  "type": "number",
                  "title": "Translation created time",
                  "format": "utc-millisec",
                  "description": "The Unix timestamp when the translation was created."
                },
                "body": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" },
                    "summary": { "type": "string", "title": "Summary" }
                  },
                  "required": ["value"],
                  "title": "Body"
                }
              },
              "required": ["info", "revision_translation_affected"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "block_content_type": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["block_content_type--block_content_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Block type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "content_translation_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Translation author"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "block_content--disclaimer_block": {
      "title": "block_content:disclaimer_block Schema",
      "description": "Describes the payload for \u0027block_content\u0027 entities of the \u0027disclaimer_block\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["block_content--disclaimer_block"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__id": {
                  "type": "integer",
                  "title": "Custom block ID",
                  "description": "The custom block ID."
                },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID",
                  "description": "The revision ID."
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The custom block language code."
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "The log entry explaining the changes in this revision.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "info": {
                  "type": "string",
                  "title": "Block description",
                  "maxLength": 255,
                  "description": "A brief description of your block."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the custom block was last edited."
                },
                "reusable": {
                  "type": "boolean",
                  "title": "Reusable",
                  "description": "A boolean indicating whether this block is reusable.",
                  "default": true
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "content_translation_created": {
                  "type": "number",
                  "title": "Translation created time",
                  "format": "utc-millisec",
                  "description": "The Unix timestamp when the translation was created."
                },
                "field_copyright": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" }
                  },
                  "required": ["value"],
                  "title": "Copyright"
                },
                "field_disclaimer": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" }
                  },
                  "required": ["value"],
                  "title": "Disclaimer"
                }
              },
              "required": ["info", "revision_translation_affected"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "block_content_type": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["block_content_type--block_content_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Block type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "content_translation_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Translation author"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "block_content--footer_promo_block": {
      "title": "block_content:footer_promo_block Schema",
      "description": "Describes the payload for \u0027block_content\u0027 entities of the \u0027footer_promo_block\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["block_content--footer_promo_block"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__id": {
                  "type": "integer",
                  "title": "Custom block ID",
                  "description": "The custom block ID."
                },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID",
                  "description": "The revision ID."
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The custom block language code."
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "The log entry explaining the changes in this revision.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "info": {
                  "type": "string",
                  "title": "Block description",
                  "maxLength": 255,
                  "description": "A brief description of your block."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the custom block was last edited."
                },
                "reusable": {
                  "type": "boolean",
                  "title": "Reusable",
                  "description": "A boolean indicating whether this block is reusable.",
                  "default": true
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "content_translation_created": {
                  "type": "number",
                  "title": "Translation created time",
                  "format": "utc-millisec",
                  "description": "The Unix timestamp when the translation was created."
                },
                "field_content_link": {
                  "type": "object",
                  "properties": {
                    "uri": { "type": "uri", "title": "URI" },
                    "title": { "type": "string", "title": "Link text" }
                  },
                  "title": "Find out more link"
                },
                "field_summary": { "type": "string", "title": "Promo text" },
                "field_title": {
                  "type": "string",
                  "title": "Promo title",
                  "maxLength": 255
                }
              },
              "required": ["info", "revision_translation_affected"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "block_content_type": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["block_content_type--block_content_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Block type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "content_translation_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Translation author"
                },
                "field_media_image": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media--image"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media Image"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "contact_message--feedback": {
      "title": "contact_message:feedback Schema",
      "description": "Describes the payload for \u0027contact_message\u0027 entities of the \u0027feedback\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["contact_message--feedback"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The message language code."
                },
                "name": {
                  "type": "string",
                  "title": "The sender\u0027s name",
                  "maxLength": 255,
                  "description": "The name of the person that is sending the contact message."
                },
                "mail": {
                  "type": "string",
                  "title": "The sender\u0027s email",
                  "format": "email",
                  "description": "The email of the person that is sending the contact message."
                },
                "subject": {
                  "type": "string",
                  "title": "Subject",
                  "maxLength": 100
                },
                "message": { "type": "string", "title": "Message" },
                "copy": {
                  "type": "boolean",
                  "title": "Copy",
                  "description": "Whether to send a copy of the message to the sender."
                }
              },
              "required": ["subject", "message"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "contact_form": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["contact_form--contact_form"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Form ID"
                },
                "recipient": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Recipient ID"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "contact_message--personal": {
      "title": "contact_message:personal Schema",
      "description": "Describes the payload for \u0027contact_message\u0027 entities of the \u0027personal\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["contact_message--personal"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The message language code."
                },
                "name": {
                  "type": "string",
                  "title": "The sender\u0027s name",
                  "maxLength": 255,
                  "description": "The name of the person that is sending the contact message."
                },
                "mail": {
                  "type": "string",
                  "title": "The sender\u0027s email",
                  "format": "email",
                  "description": "The email of the person that is sending the contact message."
                },
                "subject": {
                  "type": "string",
                  "title": "Subject",
                  "maxLength": 100
                },
                "message": { "type": "string", "title": "Message" },
                "copy": {
                  "type": "boolean",
                  "title": "Copy",
                  "description": "Whether to send a copy of the message to the sender."
                }
              },
              "required": ["subject", "message"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "contact_form": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["contact_form--contact_form"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Form ID"
                },
                "recipient": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Recipient ID"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "content_moderation_state--content_moderation_state": {
      "title": "content_moderation_state Schema",
      "description": "Describes the payload for \u0027content_moderation_state\u0027 entities.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["content_moderation_state--content_moderation_state"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__id": { "type": "integer", "title": "ID" },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "moderation_state": {
                  "type": "string",
                  "title": "Moderation state",
                  "maxLength": 255,
                  "description": "The moderation state of the referenced content."
                },
                "content_entity_type_id": {
                  "type": "string",
                  "title": "Content entity type ID",
                  "maxLength": 32,
                  "description": "The ID of the content entity type this moderation state is for."
                },
                "content_entity_id": {
                  "type": "integer",
                  "title": "Content entity ID",
                  "description": "The ID of the content entity this moderation state is for."
                },
                "content_entity_revision_id": {
                  "type": "integer",
                  "title": "Content entity revision ID",
                  "description": "The revision ID of the content entity this moderation state is for."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                }
              },
              "required": [
                "moderation_state",
                "content_entity_type_id",
                "content_entity_id",
                "content_entity_revision_id",
                "revision_translation_affected"
              ]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "User"
                },
                "workflow": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["workflow--workflow"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Workflow"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "file--file": {
      "title": "file Schema",
      "description": "Describes the payload for \u0027file\u0027 entities.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["file--file"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__fid": {
                  "type": "integer",
                  "title": "File ID",
                  "description": "The file ID."
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language code",
                  "description": "The file language code."
                },
                "filename": {
                  "type": "string",
                  "title": "Filename",
                  "maxLength": 255,
                  "description": "Name of the file with no path components."
                },
                "uri": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "uri",
                      "title": "URI value",
                      "maxLength": 255
                    },
                    "url": {
                      "type": "string",
                      "title": "Root-relative file URL"
                    }
                  },
                  "required": ["value", "url"],
                  "title": "URI",
                  "description": "The URI to access the file (either local or remote)."
                },
                "filemime": {
                  "type": "string",
                  "title": "File MIME type",
                  "maxLength": 255,
                  "description": "The file\\\u0027s MIME type."
                },
                "filesize": {
                  "type": "integer",
                  "title": "File size",
                  "description": "The size of the file in bytes."
                },
                "status": {
                  "type": "boolean",
                  "title": "Status",
                  "description": "The status of the file, temporary (FALSE) and permanent (TRUE).",
                  "default": false
                },
                "created": {
                  "type": "number",
                  "title": "Created",
                  "format": "utc-millisec",
                  "description": "The timestamp that the file was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The timestamp that the file was last changed."
                }
              },
              "required": []
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "User ID"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "media--audio": {
      "title": "media:audio Schema",
      "description": "Describes the payload for \u0027media\u0027 entities of the \u0027audio\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["media--audio"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__mid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log_message": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "name": {
                  "type": "string",
                  "title": "Name",
                  "maxLength": 255,
                  "default": ""
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time the media item was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time the media item was last edited."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                }
              },
              "required": ["name", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "bundle": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media_type--media_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "thumbnail": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Thumbnail"
                },
                "field_media_audio_file": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Audio file"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "media--document": {
      "title": "media:document Schema",
      "description": "Describes the payload for \u0027media\u0027 entities of the \u0027document\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["media--document"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__mid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log_message": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "name": {
                  "type": "string",
                  "title": "Name",
                  "maxLength": 255,
                  "default": ""
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time the media item was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time the media item was last edited."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                }
              },
              "required": ["name", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "bundle": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media_type--media_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "thumbnail": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Thumbnail"
                },
                "field_media_document": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Document"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "media--image": {
      "title": "media:image Schema",
      "description": "Describes the payload for \u0027media\u0027 entities of the \u0027image\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["media--image"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__mid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log_message": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "name": {
                  "type": "string",
                  "title": "Name",
                  "maxLength": 255,
                  "default": ""
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time the media item was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time the media item was last edited."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                }
              },
              "required": ["name", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "bundle": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media_type--media_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "thumbnail": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Thumbnail"
                },
                "field_media_image": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Image"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "media--remote_video": {
      "title": "media:remote_video Schema",
      "description": "Describes the payload for \u0027media\u0027 entities of the \u0027remote_video\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["media--remote_video"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__mid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log_message": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "name": {
                  "type": "string",
                  "title": "Name",
                  "maxLength": 255,
                  "default": ""
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time the media item was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time the media item was last edited."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "field_media_oembed_video": {
                  "type": "string",
                  "title": "Video URL",
                  "maxLength": 255
                }
              },
              "required": [
                "name",
                "revision_translation_affected",
                "path",
                "field_media_oembed_video"
              ]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "bundle": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media_type--media_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "thumbnail": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Thumbnail"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "media--video": {
      "title": "media:video Schema",
      "description": "Describes the payload for \u0027media\u0027 entities of the \u0027video\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["media--video"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__mid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log_message": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "name": {
                  "type": "string",
                  "title": "Name",
                  "maxLength": 255,
                  "default": ""
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time the media item was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time the media item was last edited."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                }
              },
              "required": ["name", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "bundle": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media_type--media_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media type"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "thumbnail": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Thumbnail"
                },
                "field_media_video_file": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["file--file"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Video file"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "node--article": {
      "title": "node:article Schema",
      "description": "Use articles for time-sensitive content like news, press releases or blog posts.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["node--article"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__nid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_timestamp": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "title": {
                  "type": "string",
                  "title": "Title",
                  "maxLength": 255
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time that the node was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the node was last edited."
                },
                "promote": {
                  "type": "boolean",
                  "title": "Promoted to front page",
                  "default": true
                },
                "sticky": {
                  "type": "boolean",
                  "title": "Sticky at top of lists",
                  "default": false
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "moderation_state": {
                  "type": "string",
                  "title": "Moderation state",
                  "maxLength": 255,
                  "description": "The moderation state of this piece of content."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "body": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" },
                    "summary": { "type": "string", "title": "Summary" }
                  },
                  "required": ["value"],
                  "title": "Body"
                }
              },
              "required": ["title", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "node_type": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["node_type--node_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Content type"
                },
                "revision_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "menu_link": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["menu_link_content--menu_link_content"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Menu link"
                },
                "field_media_image": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media--image"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media Image"
                },
                "field_tags": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["type", "id"],
                        "properties": {
                          "type": {
                            "type": "string",
                            "title": "Referenced resource",
                            "enum": ["taxonomy_term--tags"]
                          },
                          "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                          }
                        }
                      }
                    }
                  },
                  "title": "Tags"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "node--page": {
      "title": "node:page Schema",
      "description": "Use basic pages for your static content, such as an \\\u0027About us\\\u0027 page.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["node--page"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__nid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_timestamp": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "title": {
                  "type": "string",
                  "title": "Title",
                  "maxLength": 255
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time that the node was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the node was last edited."
                },
                "promote": {
                  "type": "boolean",
                  "title": "Promoted to front page",
                  "default": false
                },
                "sticky": {
                  "type": "boolean",
                  "title": "Sticky at top of lists",
                  "default": false
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "moderation_state": {
                  "type": "string",
                  "title": "Moderation state",
                  "maxLength": 255,
                  "description": "The moderation state of this piece of content."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "body": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" },
                    "summary": { "type": "string", "title": "Summary" }
                  },
                  "required": ["value"],
                  "title": "Body"
                }
              },
              "required": ["title", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "node_type": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["node_type--node_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Content type"
                },
                "revision_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "menu_link": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["menu_link_content--menu_link_content"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Menu link"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "node--recipe": {
      "title": "node:recipe Schema",
      "description": "Add a new recipe to the site.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["node--recipe"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__nid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_timestamp": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "title": {
                  "type": "string",
                  "title": "Recipe Name",
                  "maxLength": 255
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time that the node was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the node was last edited."
                },
                "promote": {
                  "type": "boolean",
                  "title": "Promoted to front page",
                  "default": true
                },
                "sticky": {
                  "type": "boolean",
                  "title": "Sticky at top of lists",
                  "default": false
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "moderation_state": {
                  "type": "string",
                  "title": "Moderation state",
                  "maxLength": 255,
                  "description": "The moderation state of this piece of content."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "field_cooking_time": {
                  "type": "integer",
                  "title": "Cooking time"
                },
                "field_difficulty": {
                  "type": "string",
                  "title": "Difficulty",
                  "enum": ["easy", "medium", "hard"],
                  "default": "medium"
                },
                "field_ingredients": {
                  "type": "array",
                  "title": "Ingredients",
                  "description": "List the ingredients required for this recipe, one per item.",
                  "items": {
                    "type": "string",
                    "title": "Text value",
                    "maxLength": 255
                  }
                },
                "field_number_of_servings": {
                  "type": "integer",
                  "title": "Number of servings"
                },
                "field_preparation_time": {
                  "type": "integer",
                  "title": "Preparation time"
                },
                "field_recipe_instruction": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" }
                  },
                  "required": ["value"],
                  "title": "Recipe instruction"
                },
                "field_summary": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" }
                  },
                  "required": ["value"],
                  "title": "Summary",
                  "description": "Provide a short overview of this recipe."
                },
                "layout_builder__layout": {
                  "type": "array",
                  "title": "Layout",
                  "items": {
                    "type": "layout_section",
                    "title": "Layout Section"
                  }
                }
              },
              "required": [
                "title",
                "revision_translation_affected",
                "path",
                "field_difficulty",
                "field_number_of_servings",
                "field_preparation_time",
                "field_recipe_instruction",
                "field_summary"
              ]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "node_type": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["node_type--node_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Content type"
                },
                "revision_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "menu_link": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["menu_link_content--menu_link_content"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Menu link"
                },
                "field_media_image": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["media--image"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Media Image"
                },
                "field_recipe_category": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["type", "id"],
                        "properties": {
                          "type": {
                            "type": "string",
                            "title": "Referenced resource",
                            "enum": ["taxonomy_term--recipe_category"]
                          },
                          "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                          }
                        }
                      }
                    }
                  },
                  "title": "Recipe category"
                },
                "field_tags": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["type", "id"],
                        "properties": {
                          "type": {
                            "type": "string",
                            "title": "Referenced resource",
                            "enum": ["taxonomy_term--tags"]
                          },
                          "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                          }
                        }
                      }
                    }
                  },
                  "title": "Tags"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "node--testclass": {
      "title": "node:testclass Schema",
      "description": "Test propouses",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["node--testclass"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__nid": { "type": "integer", "title": "ID" },
                "drupal_internal__vid": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language"
                },
                "revision_timestamp": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "title": {
                  "type": "string",
                  "title": "Title",
                  "maxLength": 255
                },
                "created": {
                  "type": "number",
                  "title": "Authored on",
                  "format": "utc-millisec",
                  "description": "The time that the node was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the node was last edited."
                },
                "promote": {
                  "type": "boolean",
                  "title": "Promoted to front page",
                  "default": true
                },
                "sticky": {
                  "type": "boolean",
                  "title": "Sticky at top of lists",
                  "default": false
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "moderation_state": {
                  "type": "string",
                  "title": "Moderation state",
                  "maxLength": 255,
                  "description": "The moderation state of this piece of content."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "body": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" },
                    "summary": { "type": "string", "title": "Summary" }
                  },
                  "required": ["value"],
                  "title": "Body"
                }
              },
              "required": ["title", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "node_type": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["node_type--node_type"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Content type"
                },
                "revision_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Authored by"
                },
                "menu_link": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["menu_link_content--menu_link_content"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Menu link"
                },
                "field_content_reference": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["node--recipe"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Content reference"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "path_alias--path_alias": {
      "title": "path_alias Schema",
      "description": "Describes the payload for \u0027path_alias\u0027 entities.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["path_alias--path_alias"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__id": { "type": "integer", "title": "ID" },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "default": "und"
                },
                "path": {
                  "type": "string",
                  "title": "System path",
                  "maxLength": 255,
                  "description": "The path that this alias belongs to."
                },
                "alias": {
                  "type": "string",
                  "title": "URL alias",
                  "maxLength": 255,
                  "description": "An alias used with this path."
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                }
              },
              "required": ["path", "alias"]
            },
            "relationships": {
              "description": "Members of the relationships object(\u0027relationships\\\u0022) represent references from the resource object in which it\u0027s defined to other resource objects . ",
              "type": "object",
              "additionalProperties": false,
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "shortcut--default": {
      "title": "shortcut:default Schema",
      "description": "Describes the payload for \u0027shortcut\u0027 entities of the \u0027default\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["shortcut--default"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__id": {
                  "type": "integer",
                  "title": "ID",
                  "description": "The ID of the shortcut."
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The language code of the shortcut."
                },
                "title": {
                  "type": "string",
                  "title": "Name",
                  "maxLength": 255,
                  "description": "The name of the shortcut."
                },
                "weight": {
                  "type": "integer",
                  "title": "Weight",
                  "description": "Weight among shortcuts in the same shortcut set."
                },
                "link": {
                  "type": "object",
                  "properties": {
                    "uri": { "type": "uri", "title": "URI" },
                    "title": { "type": "string", "title": "Link text" }
                  },
                  "title": "Path",
                  "description": "The location this shortcut points to."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                }
              },
              "required": ["title", "link"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "shortcut_set": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["shortcut_set--shortcut_set"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Shortcut set"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "taxonomy_term--recipe_category": {
      "title": "taxonomy_term:recipe_category Schema",
      "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027recipe_category\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["taxonomy_term--recipe_category"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__tid": {
                  "type": "integer",
                  "title": "Term ID",
                  "description": "The term ID."
                },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The term language code."
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log_message": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "name": { "type": "string", "title": "Name", "maxLength": 255 },
                "description": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" }
                  },
                  "required": ["value"],
                  "title": "Description"
                },
                "weight": {
                  "type": "integer",
                  "title": "Weight",
                  "description": "The weight of this term in relation to other terms.",
                  "default": 0
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the term was last edited."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "content_translation_created": {
                  "type": "number",
                  "title": "Translation created time",
                  "format": "utc-millisec",
                  "description": "The Unix timestamp when the translation was created."
                }
              },
              "required": ["name", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "vid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Vocabulary"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "parent": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["type", "id"],
                        "properties": {
                          "type": {
                            "type": "string",
                            "title": "Referenced resource",
                            "enum": ["taxonomy_term--recipe_category"]
                          },
                          "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                          }
                        }
                      }
                    }
                  },
                  "title": "Term Parents"
                },
                "content_translation_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Translation author"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "taxonomy_term--tags": {
      "title": "taxonomy_term:tags Schema",
      "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027tags\u0027 bundle.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["taxonomy_term--tags"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__tid": {
                  "type": "integer",
                  "title": "Term ID",
                  "description": "The term ID."
                },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The term language code."
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log_message": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "status": {
                  "type": "boolean",
                  "title": "Published",
                  "default": true
                },
                "name": { "type": "string", "title": "Name", "maxLength": 255 },
                "description": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Text" },
                    "format": { "type": "string", "title": "Text format" }
                  },
                  "required": ["value"],
                  "title": "Description"
                },
                "weight": {
                  "type": "integer",
                  "title": "Weight",
                  "description": "The weight of this term in relation to other terms.",
                  "default": 0
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the term was last edited."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                },
                "path": {
                  "type": "object",
                  "properties": {
                    "alias": { "type": "string", "title": "Path alias" },
                    "pid": { "type": "integer", "title": "Path id" },
                    "langcode": { "type": "string", "title": "Language Code" }
                  },
                  "title": "URL alias"
                },
                "content_translation_source": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Translation source",
                  "description": "The source language from which this translation was created.",
                  "default": "und"
                },
                "content_translation_outdated": {
                  "type": "boolean",
                  "title": "Translation outdated",
                  "description": "A boolean indicating whether this translation needs to be updated.",
                  "default": false
                },
                "content_translation_created": {
                  "type": "number",
                  "title": "Translation created time",
                  "format": "utc-millisec",
                  "description": "The Unix timestamp when the translation was created."
                }
              },
              "required": ["name", "revision_translation_affected", "path"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "vid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Vocabulary"
                },
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                },
                "parent": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["type", "id"],
                        "properties": {
                          "type": {
                            "type": "string",
                            "title": "Referenced resource",
                            "enum": ["taxonomy_term--tags"]
                          },
                          "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                          }
                        }
                      }
                    }
                  },
                  "title": "Term Parents"
                },
                "content_translation_uid": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Translation author"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "user--user": {
      "title": "user Schema",
      "description": "Describes the payload for \u0027user\u0027 entities.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["user--user"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__uid": {
                  "type": "integer",
                  "title": "User ID",
                  "description": "The user ID."
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language code",
                  "description": "The user language code."
                },
                "preferred_langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Preferred language code",
                  "description": "The user\\\u0027s preferred language code for receiving emails and viewing the site."
                },
                "preferred_admin_langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Preferred admin language code",
                  "description": "The user\\\u0027s preferred language code for viewing administration pages.",
                  "default": ""
                },
                "name": {
                  "type": "string",
                  "title": "Name",
                  "maxLength": 255,
                  "description": "The name of this user."
                },
                "pass": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "title": "The hashed password",
                      "maxLength": 255
                    },
                    "existing": {
                      "type": "string",
                      "title": "Existing password"
                    },
                    "pre_hashed": {
                      "type": "boolean",
                      "title": "Determines if a password needs hashing"
                    }
                  },
                  "title": "Password",
                  "description": "The password of this user (hashed)."
                },
                "mail": {
                  "type": "string",
                  "title": "Email",
                  "format": "email",
                  "description": "The email of this user.",
                  "default": ""
                },
                "timezone": {
                  "type": "string",
                  "title": "Timezone",
                  "maxLength": 32,
                  "description": "The timezone of this user."
                },
                "status": {
                  "type": "boolean",
                  "title": "User status",
                  "description": "Whether the user is active or blocked.",
                  "default": false
                },
                "created": {
                  "type": "number",
                  "title": "Created",
                  "format": "utc-millisec",
                  "description": "The time that the user was created."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the user was last edited."
                },
                "access": {
                  "type": "number",
                  "title": "Last access",
                  "format": "utc-millisec",
                  "description": "The time that the user last accessed the site.",
                  "default": 0
                },
                "login": {
                  "type": "number",
                  "title": "Last login",
                  "format": "utc-millisec",
                  "description": "The time that the user last logged in.",
                  "default": 0
                },
                "init": {
                  "type": "string",
                  "title": "Initial email",
                  "format": "email",
                  "description": "The email address used for initial account creation.",
                  "default": ""
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                }
              },
              "required": ["name"]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "roles": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": ["type", "id"],
                        "properties": {
                          "type": {
                            "type": "string",
                            "title": "Referenced resource",
                            "enum": ["user_role--user_role"]
                          },
                          "id": {
                            "type": "string",
                            "title": "Resource ID",
                            "format": "uuid",
                            "maxLength": 128
                          }
                        }
                      }
                    }
                  },
                  "title": "Roles"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true
    },
    "menu_link_content--menu_link_content": {
      "title": "menu_link_content Schema",
      "description": "Describes the payload for \u0027menu_link_content\u0027 entities.",
      "type": "object",
      "required": ["data"],
      "properties": {
        "data": {
          "description": "\\\u0022Resource objects\\\u0022 appear in a JSON:API document to represent resources.",
          "type": "object",
          "required": ["type", "id"],
          "properties": {
            "type": {
              "type": "string",
              "title": "type",
              "description": "Resource type",
              "enum": ["menu_link_content--menu_link_content"]
            },
            "id": {
              "type": "string",
              "title": "Resource ID",
              "format": "uuid",
              "maxLength": 128
            },
            "attributes": {
              "description": "Entity attributes",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "drupal_internal__id": {
                  "type": "integer",
                  "title": "Entity ID",
                  "description": "The entity ID for this menu link content entity."
                },
                "drupal_internal__revision_id": {
                  "type": "integer",
                  "title": "Revision ID"
                },
                "langcode": {
                  "type": "object",
                  "properties": {
                    "value": { "type": "string", "title": "Language code" },
                    "language": {
                      "type": "language_reference",
                      "title": "Language object",
                      "description": "The referenced language"
                    }
                  },
                  "required": ["value"],
                  "title": "Language",
                  "description": "The menu link language code."
                },
                "bundle": {
                  "type": "string",
                  "title": "Custom menu link bundle",
                  "maxLength": 32,
                  "description": "The content menu link bundle."
                },
                "revision_created": {
                  "type": "number",
                  "title": "Revision create time",
                  "format": "utc-millisec",
                  "description": "The time that the current revision was created."
                },
                "revision_log_message": {
                  "type": "string",
                  "title": "Revision log message",
                  "description": "Briefly describe the changes you have made.",
                  "default": ""
                },
                "enabled": {
                  "type": "boolean",
                  "title": "Enabled",
                  "description": "A flag for whether the link should be enabled in menus or hidden.",
                  "default": true
                },
                "title": {
                  "type": "string",
                  "title": "Menu link title",
                  "maxLength": 255,
                  "description": "The text to be used for this link in the menu."
                },
                "description": {
                  "type": "string",
                  "title": "Description",
                  "maxLength": 255,
                  "description": "Shown when hovering over the menu link."
                },
                "menu_name": {
                  "type": "string",
                  "title": "Menu name",
                  "maxLength": 255,
                  "description": "The menu name. All links with the same menu name (such as \\\u0022tools\\\u0022) are part of the same menu.",
                  "default": "tools"
                },
                "link": {
                  "type": "object",
                  "properties": {
                    "uri": { "type": "uri", "title": "URI" },
                    "title": { "type": "string", "title": "Link text" }
                  },
                  "title": "Link",
                  "description": "The location this menu link points to."
                },
                "external": {
                  "type": "boolean",
                  "title": "External",
                  "description": "A flag to indicate if the link points to a full URL starting with a protocol, like http:// (1 = external, 0 = internal).",
                  "default": false
                },
                "rediscover": {
                  "type": "boolean",
                  "title": "Indicates whether the menu link should be rediscovered",
                  "default": false
                },
                "weight": {
                  "type": "integer",
                  "title": "Weight",
                  "description": "Link weight among links in the same menu at the same depth. In the menu, the links with high weight will sink and links with a low weight will be positioned nearer the top.",
                  "default": 0
                },
                "expanded": {
                  "type": "boolean",
                  "title": "Show as expanded",
                  "description": "If selected and this menu link has children, the menu will always appear expanded. This option may be overridden for the entire menu tree when placing a menu block.",
                  "default": false
                },
                "parent": {
                  "type": "string",
                  "title": "Parent plugin ID",
                  "maxLength": 255,
                  "description": "The ID of the parent menu link plugin, or empty string when at the top level of the hierarchy."
                },
                "changed": {
                  "type": "number",
                  "title": "Changed",
                  "format": "utc-millisec",
                  "description": "The time that the menu link was last edited."
                },
                "default_langcode": {
                  "type": "boolean",
                  "title": "Default translation",
                  "description": "A flag indicating whether this is the default translation.",
                  "default": true
                },
                "revision_default": {
                  "type": "boolean",
                  "title": "Default revision",
                  "description": "A flag indicating whether this was a default revision when it was saved."
                },
                "revision_translation_affected": {
                  "type": "boolean",
                  "title": "Revision translation affected",
                  "description": "Indicates if the last edit of a translation belongs to current revision."
                }
              },
              "required": [
                "bundle",
                "title",
                "link",
                "revision_translation_affected"
              ]
            },
            "relationships": {
              "description": "Entity relationships",
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "revision_user": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "required": ["type", "id"],
                      "properties": {
                        "type": {
                          "type": "string",
                          "title": "Referenced resource",
                          "enum": ["user--user"]
                        },
                        "id": {
                          "type": "string",
                          "title": "Resource ID",
                          "format": "uuid",
                          "maxLength": 128
                        }
                      }
                    }
                  },
                  "title": "Revision user"
                }
              },
              "required": []
            },
            "links": {
              "type": "object",
              "additionalProperties": {
                "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                "type": "object",
                "required": ["href"],
                "properties": {
                  "href": {
                    "description": "A string containing the link\u0027s URL . ",
                    "type": "string",
                    "format": "uri - reference"
                  },
                  "meta": {
                    "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        },
        "meta": {
          "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
          "type": "object",
          "additionalProperties": true
        },
        "links": {
          "type": "object",
          "additionalProperties": {
            "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
            "type": "object",
            "required": ["href"],
            "properties": {
              "href": {
                "description": "A string containing the link\u0027s URL . ",
                "type": "string",
                "format": "uri - reference"
              },
              "meta": {
                "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "jsonapi": {
          "description": "An object describing the server\u0027s implementation",
          "type": "object",
          "properties": {
            "version": { "type": "string" },
            "meta": {
              "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
              "type": "object",
              "additionalProperties": true
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": true,
      "discriminator": "bundle"
    }
  },
  "consumes": ["application/vnd.api+json"],
  "produces": ["application/vnd.api+json"],
  "paths": {
    "/action/action": {
      "get": {
        "summary": "List (Action)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the action--action resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Action"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Action)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eaction\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Action"],
        "responses": []
      }
    },
    "/action/action/{entity}": {
      "get": {
        "summary": "View (Action)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the action--action resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the action action"
          }
        ],
        "tags": ["Action"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Action)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the action action"
          }
        ],
        "tags": ["Action"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Action)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the action action"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eaction\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Action"],
        "responses": []
      }
    },
    "/base_field_override/base_field_override": {
      "get": {
        "summary": "List (Base field override)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the base_field_override--base_field_override resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Base field override"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Base field override)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Ebase_field_override\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Base field override"],
        "responses": []
      }
    },
    "/base_field_override/base_field_override/{entity}": {
      "get": {
        "summary": "View (Base field override)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the base_field_override--base_field_override resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the base_field_override base_field_override"
          }
        ],
        "tags": ["Base field override"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Base field override)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the base_field_override base_field_override"
          }
        ],
        "tags": ["Base field override"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Base field override)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the base_field_override base_field_override"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Ebase_field_override\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Base field override"],
        "responses": []
      }
    },
    "/block/block": {
      "get": {
        "summary": "List (Block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the block--block resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Block"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Block)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Block"],
        "responses": []
      }
    },
    "/block/block/{entity}": {
      "get": {
        "summary": "View (Block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the block--block resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block block"
          }
        ],
        "tags": ["Block"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block block"
          }
        ],
        "tags": ["Block"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Block"],
        "responses": []
      }
    },
    "/block_content/banner_block/{entity}/block_content_type": {
      "get": {
        "summary": "Related: block_content_type (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/block_content/banner_block/{entity}/relationships/block_content_type": {
      "delete": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/banner_block": {
      "get": {
        "summary": "List (Custom block - Banner block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the block_content--banner_block resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "block_content:banner_block Schema",
              "description": "Describes the payload for \u0027block_content\u0027 entities of the \u0027banner_block\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/block_content--banner_block/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Custom block - Banner block)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/block_content--banner_block" }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": []
      }
    },
    "/block_content/banner_block/{entity}/content_translation_uid": {
      "get": {
        "summary": "Related: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/block_content/banner_block/{entity}/relationships/content_translation_uid": {
      "delete": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/banner_block/{entity}/field_media_image": {
      "get": {
        "summary": "Related: field_media_image (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--image" }
          }
        }
      }
    },
    "/block_content/banner_block/{entity}/relationships/field_media_image": {
      "delete": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/banner_block/{entity}": {
      "get": {
        "summary": "View (Custom block - Banner block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the block_content--banner_block resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/block_content--banner_block" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Custom block - Banner block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Custom block - Banner block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/block_content--banner_block" }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": []
      }
    },
    "/block_content/banner_block/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/block_content/banner_block/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content banner_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Banner block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/basic/{entity}/block_content_type": {
      "get": {
        "summary": "Related: block_content_type (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/block_content/basic/{entity}/relationships/block_content_type": {
      "delete": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/basic": {
      "get": {
        "summary": "List (Custom block - Basic block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the block_content--basic resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "block_content:basic Schema",
              "description": "Describes the payload for \u0027block_content\u0027 entities of the \u0027basic\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/block_content--basic/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Custom block - Basic block)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/block_content--basic" }
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": []
      }
    },
    "/block_content/basic/{entity}/content_translation_uid": {
      "get": {
        "summary": "Related: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/block_content/basic/{entity}/relationships/content_translation_uid": {
      "delete": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/basic/{entity}": {
      "get": {
        "summary": "View (Custom block - Basic block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the block_content--basic resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/block_content--basic" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Custom block - Basic block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Custom block - Basic block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/block_content--basic" }
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": []
      }
    },
    "/block_content/basic/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/block_content/basic/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content basic"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Basic block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/disclaimer_block/{entity}/block_content_type": {
      "get": {
        "summary": "Related: block_content_type (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/block_content/disclaimer_block/{entity}/relationships/block_content_type": {
      "delete": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/disclaimer_block": {
      "get": {
        "summary": "List (Custom block - Disclaimer block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the block_content--disclaimer_block resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "block_content:disclaimer_block Schema",
              "description": "Describes the payload for \u0027block_content\u0027 entities of the \u0027disclaimer_block\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/block_content--disclaimer_block/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Custom block - Disclaimer block)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content\u003C/em\u003E object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/block_content--disclaimer_block"
            }
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": []
      }
    },
    "/block_content/disclaimer_block/{entity}/content_translation_uid": {
      "get": {
        "summary": "Related: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/block_content/disclaimer_block/{entity}/relationships/content_translation_uid": {
      "delete": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/disclaimer_block/{entity}": {
      "get": {
        "summary": "View (Custom block - Disclaimer block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the block_content--disclaimer_block resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/block_content--disclaimer_block"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove (Custom block - Disclaimer block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Custom block - Disclaimer block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content\u003C/em\u003E object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/block_content--disclaimer_block"
            }
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": []
      }
    },
    "/block_content/disclaimer_block/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/block_content/disclaimer_block/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content disclaimer_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Disclaimer block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/footer_promo_block/{entity}/block_content_type": {
      "get": {
        "summary": "Related: block_content_type (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/block_content/footer_promo_block/{entity}/relationships/block_content_type": {
      "delete": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: block_content_type (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["block_content_type--block_content_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/footer_promo_block": {
      "get": {
        "summary": "List (Custom block - Footer promo block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the block_content--footer_promo_block resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "block_content:footer_promo_block Schema",
              "description": "Describes the payload for \u0027block_content\u0027 entities of the \u0027footer_promo_block\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/block_content--footer_promo_block/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Custom block - Footer promo block)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content\u003C/em\u003E object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/block_content--footer_promo_block"
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": []
      }
    },
    "/block_content/footer_promo_block/{entity}/content_translation_uid": {
      "get": {
        "summary": "Related: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/block_content/footer_promo_block/{entity}/relationships/content_translation_uid": {
      "delete": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/footer_promo_block/{entity}/field_media_image": {
      "get": {
        "summary": "Related: field_media_image (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--image" }
          }
        }
      }
    },
    "/block_content/footer_promo_block/{entity}/relationships/field_media_image": {
      "delete": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content/footer_promo_block/{entity}": {
      "get": {
        "summary": "View (Custom block - Footer promo block)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the block_content--footer_promo_block resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/block_content--footer_promo_block"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove (Custom block - Footer promo block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Custom block - Footer promo block)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content\u003C/em\u003E object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/block_content--footer_promo_block"
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": []
      }
    },
    "/block_content/footer_promo_block/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/block_content/footer_promo_block/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content footer_promo_block"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom block - Footer promo block"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/block_content_type/block_content_type": {
      "get": {
        "summary": "List (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Custom block type"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Custom block type"],
        "responses": []
      }
    },
    "/block_content_type/block_content_type/{entity}": {
      "get": {
        "summary": "View (Custom block type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the block_content_type--block_content_type resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content_type block_content_type"
          }
        ],
        "tags": ["Custom block type"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content_type block_content_type"
          }
        ],
        "tags": ["Custom block type"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Custom block type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the block_content_type block_content_type"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eblock_content_type\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Custom block type"],
        "responses": []
      }
    },
    "/configurable_language/configurable_language": {
      "get": {
        "summary": "List (Language)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the configurable_language--configurable_language resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Language"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Language)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Econfigurable_language\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Language"],
        "responses": []
      }
    },
    "/configurable_language/configurable_language/{entity}": {
      "get": {
        "summary": "View (Language)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the configurable_language--configurable_language resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the configurable_language configurable_language"
          }
        ],
        "tags": ["Language"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Language)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the configurable_language configurable_language"
          }
        ],
        "tags": ["Language"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Language)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the configurable_language configurable_language"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Econfigurable_language\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Language"],
        "responses": []
      }
    },
    "/contact_form/contact_form": {
      "get": {
        "summary": "List (Contact form)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the contact_form--contact_form resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Contact form"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Contact form)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Econtact_form\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Contact form"],
        "responses": []
      }
    },
    "/contact_form/contact_form/{entity}": {
      "get": {
        "summary": "View (Contact form)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the contact_form--contact_form resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the contact_form contact_form"
          }
        ],
        "tags": ["Contact form"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Contact form)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the contact_form contact_form"
          }
        ],
        "tags": ["Contact form"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Contact form)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the contact_form contact_form"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Econtact_form\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Contact form"],
        "responses": []
      }
    },
    "/contact_message/feedback": {
      "post": {
        "summary": "Create (Contact message - Website feedback)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Econtact_message\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/contact_message--feedback" }
          }
        ],
        "tags": ["Contact message - Website feedback"],
        "responses": []
      }
    },
    "/contact_message/personal": {
      "post": {
        "summary": "Create (Contact message - Personal contact form)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Econtact_message\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/contact_message--personal" }
          }
        ],
        "tags": ["Contact message - Personal contact form"],
        "responses": []
      }
    },
    "/date_format/date_format": {
      "get": {
        "summary": "List (Date format)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the date_format--date_format resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Date format"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Date format)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Edate_format\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Date format"],
        "responses": []
      }
    },
    "/date_format/date_format/{entity}": {
      "get": {
        "summary": "View (Date format)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the date_format--date_format resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the date_format date_format"
          }
        ],
        "tags": ["Date format"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Date format)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the date_format date_format"
          }
        ],
        "tags": ["Date format"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Date format)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the date_format date_format"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Edate_format\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Date format"],
        "responses": []
      }
    },
    "/editor/editor": {
      "get": {
        "summary": "List (Text Editor)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the editor--editor resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Text Editor"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Text Editor)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eeditor\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Text Editor"],
        "responses": []
      }
    },
    "/editor/editor/{entity}": {
      "get": {
        "summary": "View (Text Editor)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the editor--editor resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the editor editor"
          }
        ],
        "tags": ["Text Editor"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Text Editor)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the editor editor"
          }
        ],
        "tags": ["Text Editor"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Text Editor)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the editor editor"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eeditor\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Text Editor"],
        "responses": []
      }
    },
    "/entity_form_display/entity_form_display": {
      "get": {
        "summary": "List (Entity form display)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the entity_form_display--entity_form_display resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Entity form display"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Entity form display)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eentity_form_display\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Entity form display"],
        "responses": []
      }
    },
    "/entity_form_display/entity_form_display/{entity}": {
      "get": {
        "summary": "View (Entity form display)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the entity_form_display--entity_form_display resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_form_display entity_form_display"
          }
        ],
        "tags": ["Entity form display"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Entity form display)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_form_display entity_form_display"
          }
        ],
        "tags": ["Entity form display"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Entity form display)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_form_display entity_form_display"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eentity_form_display\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Entity form display"],
        "responses": []
      }
    },
    "/entity_form_mode/entity_form_mode": {
      "get": {
        "summary": "List (Form mode)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the entity_form_mode--entity_form_mode resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Form mode"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Form mode)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eentity_form_mode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Form mode"],
        "responses": []
      }
    },
    "/entity_form_mode/entity_form_mode/{entity}": {
      "get": {
        "summary": "View (Form mode)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the entity_form_mode--entity_form_mode resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_form_mode entity_form_mode"
          }
        ],
        "tags": ["Form mode"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Form mode)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_form_mode entity_form_mode"
          }
        ],
        "tags": ["Form mode"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Form mode)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_form_mode entity_form_mode"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eentity_form_mode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Form mode"],
        "responses": []
      }
    },
    "/entity_view_display/entity_view_display": {
      "get": {
        "summary": "List (Entity view display)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the entity_view_display--entity_view_display resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Entity view display"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Entity view display)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eentity_view_display\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Entity view display"],
        "responses": []
      }
    },
    "/entity_view_display/entity_view_display/{entity}": {
      "get": {
        "summary": "View (Entity view display)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the entity_view_display--entity_view_display resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_view_display entity_view_display"
          }
        ],
        "tags": ["Entity view display"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Entity view display)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_view_display entity_view_display"
          }
        ],
        "tags": ["Entity view display"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Entity view display)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_view_display entity_view_display"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eentity_view_display\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Entity view display"],
        "responses": []
      }
    },
    "/entity_view_mode/entity_view_mode": {
      "get": {
        "summary": "List (View mode)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the entity_view_mode--entity_view_mode resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["View mode"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (View mode)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eentity_view_mode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["View mode"],
        "responses": []
      }
    },
    "/entity_view_mode/entity_view_mode/{entity}": {
      "get": {
        "summary": "View (View mode)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the entity_view_mode--entity_view_mode resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_view_mode entity_view_mode"
          }
        ],
        "tags": ["View mode"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (View mode)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_view_mode entity_view_mode"
          }
        ],
        "tags": ["View mode"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (View mode)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the entity_view_mode entity_view_mode"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eentity_view_mode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["View mode"],
        "responses": []
      }
    },
    "/field_config/field_config": {
      "get": {
        "summary": "List (Field)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the field_config--field_config resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Field"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Field)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Efield_config\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Field"],
        "responses": []
      }
    },
    "/field_config/field_config/{entity}": {
      "get": {
        "summary": "View (Field)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the field_config--field_config resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the field_config field_config"
          }
        ],
        "tags": ["Field"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Field)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the field_config field_config"
          }
        ],
        "tags": ["Field"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Field)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the field_config field_config"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Efield_config\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Field"],
        "responses": []
      }
    },
    "/field_storage_config/field_storage_config": {
      "get": {
        "summary": "List (Field storage)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the field_storage_config--field_storage_config resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Field storage"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Field storage)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Efield_storage_config\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Field storage"],
        "responses": []
      }
    },
    "/field_storage_config/field_storage_config/{entity}": {
      "get": {
        "summary": "View (Field storage)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the field_storage_config--field_storage_config resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the field_storage_config field_storage_config"
          }
        ],
        "tags": ["Field storage"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Field storage)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the field_storage_config field_storage_config"
          }
        ],
        "tags": ["Field storage"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Field storage)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the field_storage_config field_storage_config"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Efield_storage_config\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Field storage"],
        "responses": []
      }
    },
    "/file/file": {
      "get": {
        "summary": "List (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["File"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "file Schema",
              "description": "Describes the payload for \u0027file\u0027 entities.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/file--file/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (File)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Efile\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/file--file" }
          }
        ],
        "tags": ["File"],
        "responses": []
      }
    },
    "/file/file/{entity}": {
      "get": {
        "summary": "View (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the file file"
          }
        ],
        "tags": ["File"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      },
      "delete": {
        "summary": "Remove (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the file file"
          }
        ],
        "tags": ["File"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the file file"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Efile\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/file--file" }
          }
        ],
        "tags": ["File"],
        "responses": []
      }
    },
    "/file/file/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the file file"
          }
        ],
        "tags": ["File"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/file/file/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the file file"
          }
        ],
        "tags": ["File"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the file file"
          }
        ],
        "tags": ["File"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the file file"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["File"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the file file"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["File"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/filter_format/filter_format": {
      "get": {
        "summary": "List (Text format)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the filter_format--filter_format resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Text format"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Text format)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Efilter_format\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Text format"],
        "responses": []
      }
    },
    "/filter_format/filter_format/{entity}": {
      "get": {
        "summary": "View (Text format)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the filter_format--filter_format resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the filter_format filter_format"
          }
        ],
        "tags": ["Text format"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Text format)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the filter_format filter_format"
          }
        ],
        "tags": ["Text format"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Text format)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the filter_format filter_format"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Efilter_format\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Text format"],
        "responses": []
      }
    },
    "/image_style/image_style": {
      "get": {
        "summary": "List (Image style)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the image_style--image_style resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Image style"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Image style)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eimage_style\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Image style"],
        "responses": []
      }
    },
    "/image_style/image_style/{entity}": {
      "get": {
        "summary": "View (Image style)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the image_style--image_style resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the image_style image_style"
          }
        ],
        "tags": ["Image style"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Image style)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the image_style image_style"
          }
        ],
        "tags": ["Image style"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Image style)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the image_style image_style"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eimage_style\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Image style"],
        "responses": []
      }
    },
    "/jsonapi_resource_config/jsonapi_resource_config": {
      "get": {
        "summary": "List (JSON:API Resource override)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the jsonapi_resource_config--jsonapi_resource_config resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["JSON:API Resource override"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (JSON:API Resource override)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Ejsonapi_resource_config\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["JSON:API Resource override"],
        "responses": []
      }
    },
    "/jsonapi_resource_config/jsonapi_resource_config/{entity}": {
      "get": {
        "summary": "View (JSON:API Resource override)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the jsonapi_resource_config--jsonapi_resource_config resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the jsonapi_resource_config jsonapi_resource_config"
          }
        ],
        "tags": ["JSON:API Resource override"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (JSON:API Resource override)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the jsonapi_resource_config jsonapi_resource_config"
          }
        ],
        "tags": ["JSON:API Resource override"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (JSON:API Resource override)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the jsonapi_resource_config jsonapi_resource_config"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Ejsonapi_resource_config\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["JSON:API Resource override"],
        "responses": []
      }
    },
    "/language_content_settings/language_content_settings": {
      "get": {
        "summary": "List (Content Language Settings)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the language_content_settings--language_content_settings resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Content Language Settings"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Content Language Settings)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Elanguage_content_settings\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Content Language Settings"],
        "responses": []
      }
    },
    "/language_content_settings/language_content_settings/{entity}": {
      "get": {
        "summary": "View (Content Language Settings)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the language_content_settings--language_content_settings resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the language_content_settings language_content_settings"
          }
        ],
        "tags": ["Content Language Settings"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Content Language Settings)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the language_content_settings language_content_settings"
          }
        ],
        "tags": ["Content Language Settings"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Content Language Settings)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the language_content_settings language_content_settings"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Elanguage_content_settings\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Content Language Settings"],
        "responses": []
      }
    },
    "/media/audio/{entity}/bundle": {
      "get": {
        "summary": "Related: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/media/audio/{entity}/relationships/bundle": {
      "delete": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/audio": {
      "get": {
        "summary": "List (Media - Audio)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the media--audio resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "media:audio Schema",
              "description": "Describes the payload for \u0027media\u0027 entities of the \u0027audio\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/media--audio/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Media - Audio)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--audio" }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": []
      }
    },
    "/media/audio/{entity}/field_media_audio_file": {
      "get": {
        "summary": "Related: field_media_audio_file (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_audio_file\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/audio/{entity}/relationships/field_media_audio_file": {
      "delete": {
        "summary": "Relationship: field_media_audio_file (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_media_audio_file (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_audio_file\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_media_audio_file (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_media_audio_file (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/audio/{entity}/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--audio" }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--audio" }
          }
        }
      }
    },
    "/media/audio/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--audio" }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--audio" }
          }
        }
      }
    },
    "/media/audio/{entity}": {
      "get": {
        "summary": "View (Media - Audio)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the media--audio resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--audio" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Media - Audio)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Media - Audio)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--audio" }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": []
      }
    },
    "/media/audio/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/audio/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/audio/{entity}/thumbnail": {
      "get": {
        "summary": "Related: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/audio/{entity}/relationships/thumbnail": {
      "delete": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/audio/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/audio/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media audio"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Audio"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/document/{entity}/bundle": {
      "get": {
        "summary": "Related: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/media/document/{entity}/relationships/bundle": {
      "delete": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/document": {
      "get": {
        "summary": "List (Media - Document)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the media--document resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "media:document Schema",
              "description": "Describes the payload for \u0027media\u0027 entities of the \u0027document\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/media--document/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Media - Document)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--document" }
          }
        ],
        "tags": ["Media - Document"],
        "responses": []
      }
    },
    "/media/document/{entity}/field_media_document": {
      "get": {
        "summary": "Related: field_media_document (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_document\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/document/{entity}/relationships/field_media_document": {
      "delete": {
        "summary": "Relationship: field_media_document (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_media_document (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_document\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_media_document (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_media_document (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/document/{entity}/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--document" }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--document" }
          }
        }
      }
    },
    "/media/document/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--document" }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--document" }
          }
        }
      }
    },
    "/media/document/{entity}": {
      "get": {
        "summary": "View (Media - Document)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the media--document resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--document" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Media - Document)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Media - Document)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--document" }
          }
        ],
        "tags": ["Media - Document"],
        "responses": []
      }
    },
    "/media/document/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/document/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/document/{entity}/thumbnail": {
      "get": {
        "summary": "Related: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/document/{entity}/relationships/thumbnail": {
      "delete": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/document/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/document/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media document"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Document"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/image/{entity}/bundle": {
      "get": {
        "summary": "Related: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/media/image/{entity}/relationships/bundle": {
      "delete": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/image": {
      "get": {
        "summary": "List (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "media:image Schema",
              "description": "Describes the payload for \u0027media\u0027 entities of the \u0027image\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/media--image/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--image" }
          }
        ],
        "tags": ["Media - Image"],
        "responses": []
      }
    },
    "/media/image/{entity}/field_media_image": {
      "get": {
        "summary": "Related: field_media_image (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/image/{entity}/relationships/field_media_image": {
      "delete": {
        "summary": "Relationship: field_media_image (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_media_image (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_media_image (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_media_image (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/image/{entity}/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--image" }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--image" }
          }
        }
      }
    },
    "/media/image/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--image" }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--image" }
          }
        }
      }
    },
    "/media/image/{entity}": {
      "get": {
        "summary": "View (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--image" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--image" }
          }
        ],
        "tags": ["Media - Image"],
        "responses": []
      }
    },
    "/media/image/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/image/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/image/{entity}/thumbnail": {
      "get": {
        "summary": "Related: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/image/{entity}/relationships/thumbnail": {
      "delete": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/image/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/image/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media image"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Image"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/remote_video/{entity}/bundle": {
      "get": {
        "summary": "Related: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/media/remote_video/{entity}/relationships/bundle": {
      "delete": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/remote_video": {
      "get": {
        "summary": "List (Media - Remote video)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the media--remote_video resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "media:remote_video Schema",
              "description": "Describes the payload for \u0027media\u0027 entities of the \u0027remote_video\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/media--remote_video/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Media - Remote video)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--remote_video" }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": []
      }
    },
    "/media/remote_video/{entity}/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--remote_video" }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--remote_video" }
          }
        }
      }
    },
    "/media/remote_video/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--remote_video" }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--remote_video" }
          }
        }
      }
    },
    "/media/remote_video/{entity}": {
      "get": {
        "summary": "View (Media - Remote video)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the media--remote_video resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--remote_video" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Media - Remote video)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Media - Remote video)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--remote_video" }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": []
      }
    },
    "/media/remote_video/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/remote_video/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/remote_video/{entity}/thumbnail": {
      "get": {
        "summary": "Related: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/remote_video/{entity}/relationships/thumbnail": {
      "delete": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/remote_video/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/remote_video/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media remote_video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Remote video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/video/{entity}/bundle": {
      "get": {
        "summary": "Related: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/media/video/{entity}/relationships/bundle": {
      "delete": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: bundle (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ebundle\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: bundle (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media_type--media_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/video": {
      "get": {
        "summary": "List (Media - Video)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the media--video resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "media:video Schema",
              "description": "Describes the payload for \u0027media\u0027 entities of the \u0027video\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/media--video/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Media - Video)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--video" }
          }
        ],
        "tags": ["Media - Video"],
        "responses": []
      }
    },
    "/media/video/{entity}/field_media_video_file": {
      "get": {
        "summary": "Related: field_media_video_file (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_video_file\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/video/{entity}/relationships/field_media_video_file": {
      "delete": {
        "summary": "Relationship: field_media_video_file (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_media_video_file (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_video_file\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_media_video_file (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_media_video_file (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/video/{entity}/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--video" }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--video" }
          }
        }
      }
    },
    "/media/video/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--video" }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/media--video" }
          }
        }
      }
    },
    "/media/video/{entity}": {
      "get": {
        "summary": "View (Media - Video)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the media--video resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--video" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Media - Video)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Media - Video)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/media--video" }
          }
        ],
        "tags": ["Media - Video"],
        "responses": []
      }
    },
    "/media/video/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/video/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/video/{entity}/thumbnail": {
      "get": {
        "summary": "Related: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/media/video/{entity}/relationships/thumbnail": {
      "delete": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: thumbnail (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Ethumbnail\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: thumbnail (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media/video/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/media/video/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media video"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Media - Video"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/media_type/media_type": {
      "get": {
        "summary": "List (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Media type"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia_type\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Media type"],
        "responses": []
      }
    },
    "/media_type/media_type/{entity}": {
      "get": {
        "summary": "View (Media type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the media_type--media_type resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media_type media_type"
          }
        ],
        "tags": ["Media type"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media_type media_type"
          }
        ],
        "tags": ["Media type"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Media type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the media_type media_type"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emedia_type\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Media type"],
        "responses": []
      }
    },
    "/menu/menu": {
      "get": {
        "summary": "List (Menu)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the menu--menu resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Menu"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Menu)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emenu\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Menu"],
        "responses": []
      }
    },
    "/menu/menu/{entity}": {
      "get": {
        "summary": "View (Menu)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the menu--menu resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu menu"
          }
        ],
        "tags": ["Menu"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Menu)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu menu"
          }
        ],
        "tags": ["Menu"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Menu)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu menu"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emenu\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Menu"],
        "responses": []
      }
    },
    "/menu_link_content/menu_link_content": {
      "get": {
        "summary": "List (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Custom menu link"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "menu_link_content Schema",
              "description": "Describes the payload for \u0027menu_link_content\u0027 entities.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/menu_link_content--menu_link_content/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true,
              "discriminator": "bundle"
            }
          }
        }
      },
      "post": {
        "summary": "Create (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emenu_link_content\u003C/em\u003E object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/menu_link_content--menu_link_content"
            }
          }
        ],
        "tags": ["Custom menu link"],
        "responses": []
      }
    },
    "/menu_link_content/menu_link_content/{entity}": {
      "get": {
        "summary": "View (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu_link_content menu_link_content"
          }
        ],
        "tags": ["Custom menu link"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/menu_link_content--menu_link_content"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu_link_content menu_link_content"
          }
        ],
        "tags": ["Custom menu link"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu_link_content menu_link_content"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Emenu_link_content\u003C/em\u003E object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/menu_link_content--menu_link_content"
            }
          }
        ],
        "tags": ["Custom menu link"],
        "responses": []
      }
    },
    "/menu_link_content/menu_link_content/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu_link_content menu_link_content"
          }
        ],
        "tags": ["Custom menu link"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/menu_link_content/menu_link_content/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu_link_content menu_link_content"
          }
        ],
        "tags": ["Custom menu link"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu_link_content menu_link_content"
          }
        ],
        "tags": ["Custom menu link"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu_link_content menu_link_content"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom menu link"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the menu_link_content menu_link_content"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Custom menu link"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/article": {
      "get": {
        "summary": "List (Content - Article)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the node--article resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "node:article Schema",
              "description": "Use articles for time-sensitive content like news, press releases or blog posts.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/node--article/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Content - Article)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/node--article" }
          }
        ],
        "tags": ["Content - Article"],
        "responses": []
      }
    },
    "/node/article/{entity}/field_media_image": {
      "get": {
        "summary": "Related: field_media_image (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--image" }
          }
        }
      }
    },
    "/node/article/{entity}/relationships/field_media_image": {
      "delete": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/article/{entity}/field_tags": {
      "get": {
        "summary": "Related: field_tags (Taxonomy term - Tags)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--tags resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_tags\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "taxonomy_term:tags Schema",
              "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027tags\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/taxonomy_term--tags/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/node/article/{entity}/relationships/field_tags": {
      "delete": {
        "summary": "Relationship: field_tags (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_tags (Taxonomy term - Tags)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--tags resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_tags\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_tags (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_tags (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      }
    },
    "/node/article/{entity}": {
      "get": {
        "summary": "View (Content - Article)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the node--article resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/node--article" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Content - Article)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Content - Article)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/node--article" }
          }
        ],
        "tags": ["Content - Article"],
        "responses": []
      }
    },
    "/node/article/{entity}/menu_link": {
      "get": {
        "summary": "Related: menu_link (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type through the \u003Cem class=\u0022placeholder\u0022\u003Emenu_link\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/menu_link_content--menu_link_content"
            }
          }
        }
      }
    },
    "/node/article/{entity}/relationships/menu_link": {
      "delete": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type through the \u003Cem class=\u0022placeholder\u0022\u003Emenu_link\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/article/{entity}/node_type": {
      "get": {
        "summary": "Related: node_type (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/node/article/{entity}/relationships/node_type": {
      "delete": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: node_type (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/article/{entity}/revision_uid": {
      "get": {
        "summary": "Related: revision_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/node/article/{entity}/relationships/revision_uid": {
      "delete": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/article/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/node/article/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node article"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Article"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/page": {
      "get": {
        "summary": "List (Content - Basic page)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the node--page resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "node:page Schema",
              "description": "Use basic pages for your static content, such as an \\\u0027About us\\\u0027 page.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/node--page/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Content - Basic page)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/node--page" }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": []
      }
    },
    "/node/page/{entity}": {
      "get": {
        "summary": "View (Content - Basic page)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the node--page resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/node--page" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Content - Basic page)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Content - Basic page)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/node--page" }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": []
      }
    },
    "/node/page/{entity}/menu_link": {
      "get": {
        "summary": "Related: menu_link (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type through the \u003Cem class=\u0022placeholder\u0022\u003Emenu_link\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/menu_link_content--menu_link_content"
            }
          }
        }
      }
    },
    "/node/page/{entity}/relationships/menu_link": {
      "delete": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type through the \u003Cem class=\u0022placeholder\u0022\u003Emenu_link\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/page/{entity}/node_type": {
      "get": {
        "summary": "Related: node_type (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/node/page/{entity}/relationships/node_type": {
      "delete": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: node_type (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/page/{entity}/revision_uid": {
      "get": {
        "summary": "Related: revision_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/node/page/{entity}/relationships/revision_uid": {
      "delete": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/page/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/node/page/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Basic page"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/recipe": {
      "get": {
        "summary": "List (Content - Recipe)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the node--recipe resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "node:recipe Schema",
              "description": "Add a new recipe to the site.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/node--recipe/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Content - Recipe)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/node--recipe" }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": []
      }
    },
    "/node/recipe/{entity}/field_media_image": {
      "get": {
        "summary": "Related: field_media_image (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/media--image" }
          }
        }
      }
    },
    "/node/recipe/{entity}/relationships/field_media_image": {
      "delete": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the media--image resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_media_image\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_media_image (Media - Image)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["media--image"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/recipe/{entity}/field_recipe_category": {
      "get": {
        "summary": "Related: field_recipe_category (Taxonomy term - Recipe category)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--recipe_category resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_recipe_category\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "taxonomy_term:recipe_category Schema",
              "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027recipe_category\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/taxonomy_term--recipe_category/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/node/recipe/{entity}/relationships/field_recipe_category": {
      "delete": {
        "summary": "Relationship: field_recipe_category (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_recipe_category (Taxonomy term - Recipe category)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--recipe_category resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_recipe_category\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_recipe_category (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_recipe_category (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      }
    },
    "/node/recipe/{entity}/field_tags": {
      "get": {
        "summary": "Related: field_tags (Taxonomy term - Tags)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--tags resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_tags\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "taxonomy_term:tags Schema",
              "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027tags\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/taxonomy_term--tags/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/node/recipe/{entity}/relationships/field_tags": {
      "delete": {
        "summary": "Relationship: field_tags (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_tags (Taxonomy term - Tags)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--tags resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_tags\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_tags (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_tags (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      }
    },
    "/node/recipe/{entity}": {
      "get": {
        "summary": "View (Content - Recipe)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the node--recipe resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/node--recipe" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Content - Recipe)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Content - Recipe)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/node--recipe" }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": []
      }
    },
    "/node/recipe/{entity}/menu_link": {
      "get": {
        "summary": "Related: menu_link (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type through the \u003Cem class=\u0022placeholder\u0022\u003Emenu_link\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/menu_link_content--menu_link_content"
            }
          }
        }
      }
    },
    "/node/recipe/{entity}/relationships/menu_link": {
      "delete": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type through the \u003Cem class=\u0022placeholder\u0022\u003Emenu_link\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/recipe/{entity}/node_type": {
      "get": {
        "summary": "Related: node_type (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/node/recipe/{entity}/relationships/node_type": {
      "delete": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: node_type (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/recipe/{entity}/revision_uid": {
      "get": {
        "summary": "Related: revision_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/node/recipe/{entity}/relationships/revision_uid": {
      "delete": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/recipe/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/node/recipe/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node recipe"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Recipe"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/testclass": {
      "get": {
        "summary": "List (Content - Testclass)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the node--testclass resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "node:testclass Schema",
              "description": "Test propouses",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/node--testclass/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Content - Testclass)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/node--testclass" }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": []
      }
    },
    "/node/testclass/{entity}/field_content_reference": {
      "get": {
        "summary": "Related: field_content_reference (Content - Recipe)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the node--recipe resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_content_reference\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/node--recipe" }
          }
        }
      }
    },
    "/node/testclass/{entity}/relationships/field_content_reference": {
      "delete": {
        "summary": "Relationship: field_content_reference (Content - Recipe)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: field_content_reference (Content - Recipe)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the node--recipe resource type through the \u003Cem class=\u0022placeholder\u0022\u003Efield_content_reference\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node--recipe"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: field_content_reference (Content - Recipe)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node--recipe"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node--recipe"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: field_content_reference (Content - Recipe)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node--recipe"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node--recipe"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/testclass/{entity}": {
      "get": {
        "summary": "View (Content - Testclass)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the node--testclass resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/node--testclass" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Content - Testclass)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Content - Testclass)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/node--testclass" }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": []
      }
    },
    "/node/testclass/{entity}/menu_link": {
      "get": {
        "summary": "Related: menu_link (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type through the \u003Cem class=\u0022placeholder\u0022\u003Emenu_link\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/menu_link_content--menu_link_content"
            }
          }
        }
      }
    },
    "/node/testclass/{entity}/relationships/menu_link": {
      "delete": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the menu_link_content--menu_link_content resource type through the \u003Cem class=\u0022placeholder\u0022\u003Emenu_link\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: menu_link (Custom menu link)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["menu_link_content--menu_link_content"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/testclass/{entity}/node_type": {
      "get": {
        "summary": "Related: node_type (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/node/testclass/{entity}/relationships/node_type": {
      "delete": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: node_type (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type through the \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: node_type (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["node_type--node_type"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/testclass/{entity}/revision_uid": {
      "get": {
        "summary": "Related: revision_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/node/testclass/{entity}/relationships/revision_uid": {
      "delete": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node/testclass/{entity}/uid": {
      "get": {
        "summary": "Related: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/node/testclass/{entity}/relationships/uid": {
      "delete": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "resourceVersion",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "The JSON:API module exposes entity revisions as resource versions. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/revisions\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node testclass"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Content - Testclass"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/node_type/node_type": {
      "get": {
        "summary": "List (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Content type"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Content type"],
        "responses": []
      }
    },
    "/node_type/node_type/{entity}": {
      "get": {
        "summary": "View (Content type)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the node_type--node_type resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node_type node_type"
          }
        ],
        "tags": ["Content type"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node_type node_type"
          }
        ],
        "tags": ["Content type"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Content type)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the node_type node_type"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Enode_type\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Content type"],
        "responses": []
      }
    },
    "/path_alias/path_alias": {
      "get": {
        "summary": "List (URL alias)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the path_alias--path_alias resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["URL alias"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "path_alias Schema",
              "description": "Describes the payload for \u0027path_alias\u0027 entities.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/path_alias--path_alias/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (URL alias)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Epath_alias\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/path_alias--path_alias" }
          }
        ],
        "tags": ["URL alias"],
        "responses": []
      }
    },
    "/path_alias/path_alias/{entity}": {
      "get": {
        "summary": "View (URL alias)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the path_alias--path_alias resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the path_alias path_alias"
          }
        ],
        "tags": ["URL alias"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/path_alias--path_alias" }
          }
        }
      },
      "delete": {
        "summary": "Remove (URL alias)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the path_alias path_alias"
          }
        ],
        "tags": ["URL alias"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (URL alias)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the path_alias path_alias"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Epath_alias\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/path_alias--path_alias" }
          }
        ],
        "tags": ["URL alias"],
        "responses": []
      }
    },
    "/rdf_mapping/rdf_mapping": {
      "get": {
        "summary": "List (RDF mapping)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the rdf_mapping--rdf_mapping resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["RDF mapping"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (RDF mapping)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Erdf_mapping\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["RDF mapping"],
        "responses": []
      }
    },
    "/rdf_mapping/rdf_mapping/{entity}": {
      "get": {
        "summary": "View (RDF mapping)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the rdf_mapping--rdf_mapping resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the rdf_mapping rdf_mapping"
          }
        ],
        "tags": ["RDF mapping"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (RDF mapping)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the rdf_mapping rdf_mapping"
          }
        ],
        "tags": ["RDF mapping"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (RDF mapping)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the rdf_mapping rdf_mapping"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Erdf_mapping\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["RDF mapping"],
        "responses": []
      }
    },
    "/responsive_image_style/responsive_image_style": {
      "get": {
        "summary": "List (Responsive image style)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the responsive_image_style--responsive_image_style resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Responsive image style"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Responsive image style)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eresponsive_image_style\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Responsive image style"],
        "responses": []
      }
    },
    "/responsive_image_style/responsive_image_style/{entity}": {
      "get": {
        "summary": "View (Responsive image style)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the responsive_image_style--responsive_image_style resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the responsive_image_style responsive_image_style"
          }
        ],
        "tags": ["Responsive image style"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Responsive image style)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the responsive_image_style responsive_image_style"
          }
        ],
        "tags": ["Responsive image style"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Responsive image style)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the responsive_image_style responsive_image_style"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eresponsive_image_style\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Responsive image style"],
        "responses": []
      }
    },
    "/search_page/search_page": {
      "get": {
        "summary": "List (Search page)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the search_page--search_page resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Search page"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Search page)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Esearch_page\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Search page"],
        "responses": []
      }
    },
    "/search_page/search_page/{entity}": {
      "get": {
        "summary": "View (Search page)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the search_page--search_page resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the search_page search_page"
          }
        ],
        "tags": ["Search page"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Search page)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the search_page search_page"
          }
        ],
        "tags": ["Search page"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Search page)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the search_page search_page"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Esearch_page\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Search page"],
        "responses": []
      }
    },
    "/shortcut/default": {
      "get": {
        "summary": "List (Shortcut link - Default)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the shortcut--default resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "shortcut:default Schema",
              "description": "Describes the payload for \u0027shortcut\u0027 entities of the \u0027default\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/shortcut--default/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Shortcut link - Default)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eshortcut\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/shortcut--default" }
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": []
      }
    },
    "/shortcut/default/{entity}": {
      "get": {
        "summary": "View (Shortcut link - Default)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the shortcut--default resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut default"
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/shortcut--default" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Shortcut link - Default)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut default"
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Shortcut link - Default)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut default"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eshortcut\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/shortcut--default" }
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": []
      }
    },
    "/shortcut/default/{entity}/shortcut_set": {
      "get": {
        "summary": "Related: shortcut_set (Shortcut set)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the shortcut_set--shortcut_set resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eshortcut_set\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut default"
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/shortcut/default/{entity}/relationships/shortcut_set": {
      "delete": {
        "summary": "Relationship: shortcut_set (Shortcut set)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut default"
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: shortcut_set (Shortcut set)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the shortcut_set--shortcut_set resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eshortcut_set\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut default"
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["shortcut_set--shortcut_set"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: shortcut_set (Shortcut set)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut default"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["shortcut_set--shortcut_set"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["shortcut_set--shortcut_set"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: shortcut_set (Shortcut set)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut default"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["shortcut_set--shortcut_set"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Shortcut link - Default"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["shortcut_set--shortcut_set"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/shortcut_set/shortcut_set": {
      "get": {
        "summary": "List (Shortcut set)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the shortcut_set--shortcut_set resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Shortcut set"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Shortcut set)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eshortcut_set\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Shortcut set"],
        "responses": []
      }
    },
    "/shortcut_set/shortcut_set/{entity}": {
      "get": {
        "summary": "View (Shortcut set)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the shortcut_set--shortcut_set resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut_set shortcut_set"
          }
        ],
        "tags": ["Shortcut set"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Shortcut set)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut_set shortcut_set"
          }
        ],
        "tags": ["Shortcut set"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Shortcut set)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the shortcut_set shortcut_set"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eshortcut_set\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Shortcut set"],
        "responses": []
      }
    },
    "/taxonomy_term/recipe_category": {
      "get": {
        "summary": "List (Taxonomy term - Recipe category)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--recipe_category resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "taxonomy_term:recipe_category Schema",
              "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027recipe_category\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/taxonomy_term--recipe_category/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Etaxonomy_term\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/taxonomy_term--recipe_category" }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": []
      }
    },
    "/taxonomy_term/recipe_category/{entity}/content_translation_uid": {
      "get": {
        "summary": "Related: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/taxonomy_term/recipe_category/{entity}/relationships/content_translation_uid": {
      "delete": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy_term/recipe_category/{entity}": {
      "get": {
        "summary": "View (Taxonomy term - Recipe category)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--recipe_category resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/taxonomy_term--recipe_category" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Etaxonomy_term\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/taxonomy_term--recipe_category" }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": []
      }
    },
    "/taxonomy_term/recipe_category/{entity}/parent": {
      "get": {
        "summary": "Related: parent (Taxonomy term - Recipe category)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--recipe_category resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eparent\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "taxonomy_term:recipe_category Schema",
              "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027recipe_category\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/taxonomy_term--recipe_category/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/taxonomy_term/recipe_category/{entity}/relationships/parent": {
      "delete": {
        "summary": "Relationship: parent (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: parent (Taxonomy term - Recipe category)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--recipe_category resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eparent\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: parent (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: parent (Taxonomy term - Recipe category)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--recipe_category"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy_term/recipe_category/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/taxonomy_term/recipe_category/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy_term/recipe_category/{entity}/vid": {
      "get": {
        "summary": "Related: vid (Taxonomy vocabulary)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_vocabulary--taxonomy_vocabulary resource type through the \u003Cem class=\u0022placeholder\u0022\u003Evid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/taxonomy_term/recipe_category/{entity}/relationships/vid": {
      "delete": {
        "summary": "Relationship: vid (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: vid (Taxonomy vocabulary)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_vocabulary--taxonomy_vocabulary resource type through the \u003Cem class=\u0022placeholder\u0022\u003Evid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: vid (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: vid (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term recipe_category"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Recipe category"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy_term/tags": {
      "get": {
        "summary": "List (Taxonomy term - Tags)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--tags resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "taxonomy_term:tags Schema",
              "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027tags\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/taxonomy_term--tags/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Etaxonomy_term\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/taxonomy_term--tags" }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": []
      }
    },
    "/taxonomy_term/tags/{entity}/content_translation_uid": {
      "get": {
        "summary": "Related: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/taxonomy_term/tags/{entity}/relationships/content_translation_uid": {
      "delete": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Econtent_translation_uid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: content_translation_uid (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy_term/tags/{entity}": {
      "get": {
        "summary": "View (Taxonomy term - Tags)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--tags resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/taxonomy_term--tags" }
          }
        }
      },
      "delete": {
        "summary": "Remove (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Etaxonomy_term\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/taxonomy_term--tags" }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": []
      }
    },
    "/taxonomy_term/tags/{entity}/parent": {
      "get": {
        "summary": "Related: parent (Taxonomy term - Tags)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--tags resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eparent\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "taxonomy_term:tags Schema",
              "description": "Describes the payload for \u0027taxonomy_term\u0027 entities of the \u0027tags\u0027 bundle.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/taxonomy_term--tags/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/taxonomy_term/tags/{entity}/relationships/parent": {
      "delete": {
        "summary": "Relationship: parent (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: parent (Taxonomy term - Tags)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_term--tags resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eparent\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: parent (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: parent (Taxonomy term - Tags)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["taxonomy_term--tags"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy_term/tags/{entity}/revision_user": {
      "get": {
        "summary": "Related: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/taxonomy_term/tags/{entity}/relationships/revision_user": {
      "delete": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: revision_user (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type through the \u003Cem class=\u0022placeholder\u0022\u003Erevision_user\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: revision_user (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["user--user"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy_term/tags/{entity}/vid": {
      "get": {
        "summary": "Related: vid (Taxonomy vocabulary)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_vocabulary--taxonomy_vocabulary resource type through the \u003Cem class=\u0022placeholder\u0022\u003Evid\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/taxonomy_term/tags/{entity}/relationships/vid": {
      "delete": {
        "summary": "Relationship: vid (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: vid (Taxonomy vocabulary)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_vocabulary--taxonomy_vocabulary resource type through the \u003Cem class=\u0022placeholder\u0022\u003Evid\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: vid (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: vid (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_term tags"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["Taxonomy term - Tags"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["taxonomy_vocabulary--taxonomy_vocabulary"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy_vocabulary/taxonomy_vocabulary": {
      "get": {
        "summary": "List (Taxonomy vocabulary)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_vocabulary--taxonomy_vocabulary resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Taxonomy vocabulary"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Etaxonomy_vocabulary\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Taxonomy vocabulary"],
        "responses": []
      }
    },
    "/taxonomy_vocabulary/taxonomy_vocabulary/{entity}": {
      "get": {
        "summary": "View (Taxonomy vocabulary)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the taxonomy_vocabulary--taxonomy_vocabulary resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_vocabulary taxonomy_vocabulary"
          }
        ],
        "tags": ["Taxonomy vocabulary"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_vocabulary taxonomy_vocabulary"
          }
        ],
        "tags": ["Taxonomy vocabulary"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Taxonomy vocabulary)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the taxonomy_vocabulary taxonomy_vocabulary"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Etaxonomy_vocabulary\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Taxonomy vocabulary"],
        "responses": []
      }
    },
    "/tour/tour": {
      "get": {
        "summary": "List (Tour)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the tour--tour resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Tour"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Tour)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Etour\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Tour"],
        "responses": []
      }
    },
    "/tour/tour/{entity}": {
      "get": {
        "summary": "View (Tour)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the tour--tour resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the tour tour"
          }
        ],
        "tags": ["Tour"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Tour)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the tour tour"
          }
        ],
        "tags": ["Tour"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Tour)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the tour tour"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Etour\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Tour"],
        "responses": []
      }
    },
    "/user/user": {
      "get": {
        "summary": "List (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "title": "user Schema",
              "description": "Describes the payload for \u0027user\u0027 entities.",
              "type": "object",
              "required": ["data"],
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/user--user/properties/data"
                  }
                },
                "meta": {
                  "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                  "type": "object",
                  "additionalProperties": true
                },
                "links": {
                  "type": "object",
                  "additionalProperties": {
                    "description": "A link **MUST** be represented as either: a string containing the link\u0027s URL or a link object . ",
                    "type": "object",
                    "required": ["href"],
                    "properties": {
                      "href": {
                        "description": "A string containing the link\u0027s URL . ",
                        "type": "string",
                        "format": "uri - reference"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  }
                },
                "jsonapi": {
                  "description": "An object describing the server\u0027s implementation",
                  "type": "object",
                  "properties": {
                    "version": { "type": "string" },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "summary": "Create (User)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Euser\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/user--user" }
          }
        ],
        "tags": ["User"],
        "responses": []
      }
    },
    "/user/user/{entity}/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Euser\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/user--user" }
          }
        ],
        "tags": ["User"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/user/user/{file_field_name}": {
      "post": {
        "summary": "File_upload POST",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Euser\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/user--user" }
          }
        ],
        "tags": ["User"],
        "responses": {
          "201": {
            "description": "Entity created",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      }
    },
    "/user/user/{entity}": {
      "get": {
        "summary": "View (User)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the user--user resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/user--user" }
          }
        }
      },
      "delete": {
        "summary": "Remove (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          }
        ],
        "tags": ["User"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (User)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Euser\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "#/definitions/user--user" }
          }
        ],
        "tags": ["User"],
        "responses": []
      }
    },
    "/user/user/{entity}/roles": {
      "get": {
        "summary": "Related: roles (Role)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the user_role--user_role resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eroles\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          }
        ],
        "tags": ["User"],
        "responses": { "200": { "description": "successful operation" } }
      }
    },
    "/user/user/{entity}/relationships/roles": {
      "delete": {
        "summary": "Relationship: roles (Role)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          }
        ],
        "tags": ["User"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: roles (Role)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the user_role--user_role resource type through the \u003Cem class=\u0022placeholder\u0022\u003Eroles\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["user_role--user_role"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: roles (Role)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["user_role--user_role"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["user_role--user_role"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: roles (Role)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["user_role--user_role"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        ],
        "tags": ["User"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of objects each containing \\\u0022type\\\u0022 and \\\u0022id\\\u0022 members for to-many relationships.",
                  "type": "array",
                  "items": {
                    "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                    "type": "object",
                    "required": ["type", "id"],
                    "properties": {
                      "type": {
                        "title": "Resource type name",
                        "type": "string",
                        "enum": ["user_role--user_role"]
                      },
                      "id": {
                        "title": "Resource ID",
                        "type": "string",
                        "format": "uuid"
                      },
                      "meta": {
                        "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                        "type": "object",
                        "additionalProperties": true,
                        "properties": {}
                      }
                    },
                    "additionalProperties": false
                  },
                  "uniqueItems": true
                }
              }
            }
          }
        }
      }
    },
    "/user/user/{entity}/user_picture": {
      "get": {
        "summary": "Related: user_picture (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ERelated endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euser_picture\u003C/em\u003E relationship. The related endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular related resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/file--file" }
          }
        }
      }
    },
    "/user/user/{entity}/relationships/user_picture": {
      "delete": {
        "summary": "Relationship: user_picture (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          }
        ],
        "tags": ["User"],
        "responses": { "204": { "description": "no content" } }
      },
      "get": {
        "summary": "Relationship: user_picture (File)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#fetching-relationships\u0022\u003ERelationship endpoint\u003C/a\u003E\u003C/em\u003E for the file--file resource type through the \u003Cem class=\u0022placeholder\u0022\u003Euser_picture\u003C/em\u003E relationship. The relationship endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022https://jsonapi.org/format/#document-resource-identifier-objects\u0022\u003Eresource identifier object\u003C/a\u003E\u003C/em\u003E with the data for a particular relationship.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Relationship: user_picture (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Relationship: user_picture (File)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user user"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The resource identifier object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        ],
        "tags": ["User"],
        "responses": {
          "201": {
            "description": "created",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "The \u0022type\u0022 and \u0022id\u0022 to non-empty members.",
                  "type": "object",
                  "required": ["type", "id"],
                  "properties": {
                    "type": {
                      "title": "Resource type name",
                      "type": "string",
                      "enum": ["file--file"]
                    },
                    "id": {
                      "title": "Resource ID",
                      "type": "string",
                      "format": "uuid"
                    },
                    "meta": {
                      "description": "Non-standard meta-information that can not be represented as an attribute or relationship.",
                      "type": "object",
                      "additionalProperties": true,
                      "properties": {}
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          }
        }
      }
    },
    "/user_role/user_role": {
      "get": {
        "summary": "List (Role)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the user_role--user_role resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Role"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Role)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Euser_role\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Role"],
        "responses": []
      }
    },
    "/user_role/user_role/{entity}": {
      "get": {
        "summary": "View (Role)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the user_role--user_role resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user_role user_role"
          }
        ],
        "tags": ["Role"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Role)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user_role user_role"
          }
        ],
        "tags": ["Role"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Role)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the user_role user_role"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Euser_role\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Role"],
        "responses": []
      }
    },
    "/view/view": {
      "get": {
        "summary": "List (View)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the view--view resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["View"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (View)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eview\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["View"],
        "responses": []
      }
    },
    "/view/view/{entity}": {
      "get": {
        "summary": "View (View)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the view--view resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the view view"
          }
        ],
        "tags": ["View"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (View)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the view view"
          }
        ],
        "tags": ["View"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (View)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the view view"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eview\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["View"],
        "responses": []
      }
    },
    "/workflow/workflow": {
      "get": {
        "summary": "List (Workflow)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003ECollection endpoint\u003C/a\u003E\u003C/em\u003E for the workflow--workflow resource type. Collections are a list of \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource objects\u003C/a\u003E\u003C/em\u003E for a particular resource type. In the JSON API module for Drupal all collections are homogeneous, which means that all the items in a collection are of the same type.",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module has some of the most robust and feature-rich filtering features around. All of that power comes with a bit of a learning curve though. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/filtering\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "sort",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "The JSON:API module allows you to sort collections based on properties in the resource or in nested resources. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/sorting\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "page",
            "in": "query",
            "type": "array",
            "required": false,
            "description": "Pagination can be a deceptively complex topic. It\u0027s easy to fall into traps and not follow best-practices. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/pagination\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          },
          {
            "name": "include",
            "in": "query",
            "type": "string",
            "required": false,
            "description": "Embed related entities in the response. For example: use a query string like \u003Ccode\u003E?include=comments.author\u003C/code\u003E to include all the entities referenced by \u003Ccode\u003Ecomments\u003C/code\u003E and all the entities referenced by \u003Ccode\u003Eauthor\u003C/code\u003E on those entities!. \u003Ca href=\u0022https://www.drupal.org/docs/8/modules/jsonapi/includes\u0022\u003ELearn more in the documentation\u003C/a\u003E."
          }
        ],
        "tags": ["Workflow"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "post": {
        "summary": "Create (Workflow)",
        "description": null,
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eworkflow\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Workflow"],
        "responses": []
      }
    },
    "/workflow/workflow/{entity}": {
      "get": {
        "summary": "View (Workflow)",
        "description": "\u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#fetching\u0022\u003EIndividual endpoint\u003C/a\u003E\u003C/em\u003E for the workflow--workflow resource type. The individual endpoint contains a \u003Cem class=\u0022placeholder\u0022\u003E\u003Ca href=\u0022http://jsonapi.org/format/#document-resource-objects\u0022\u003Eresource object\u003C/a\u003E\u003C/em\u003E with the data for a particular resource or entity.",
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the workflow workflow"
          }
        ],
        "tags": ["Workflow"],
        "responses": { "200": { "description": "successful operation" } }
      },
      "delete": {
        "summary": "Remove (Workflow)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the workflow workflow"
          }
        ],
        "tags": ["Workflow"],
        "responses": { "201": { "description": "Entity deleted" } }
      },
      "patch": {
        "summary": "Update (Workflow)",
        "description": null,
        "parameters": [
          {
            "name": "entity",
            "required": true,
            "in": "path",
            "type": "uuid",
            "description": "The uuid of the workflow workflow"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The \u003Cem class=\u0022placeholder\u0022\u003Eworkflow\u003C/em\u003E object",
            "required": true,
            "schema": { "$ref": "" }
          }
        ],
        "tags": ["Workflow"],
        "responses": []
      }
    }
  }
}
